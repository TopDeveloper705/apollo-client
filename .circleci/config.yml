version: 2

common_test_steps: &common_test_steps
  steps:
    - checkout
    - restore_cache:
      keys:
        # When lock file changes, use increasingly general patterns to
        # restore cache
        - npm-v2-{{ .Branch }}-{{ checksum "package-lock.json" }}
        - npm-v2-{{ .Branch }}-
        - npm-v2-
    - run: npm --version
    - run: npm ci
    - save_cache:
      key: npm-v2-{{ .Branch }}-{{ checksum "package-lock.json" }}
      paths:
        # This should cache the npm cache instead of node_modules, which is
        # needed because npm ci actually removes node_modules before
        # installing to guarantee a clean slate.
        - ~/.npm

jobs:
  Danger:
    docker:
      - image: circleci/node:8
    <<: *common_test_steps
      - run: npm run danger

  Docs:
    docker:
      - image: circleci/node:8
    <<: *common_test_steps
      - run: cd docs && npm i && npm run build

  Filesize:
    docker:
      - image: circleci/node:8
    <<: *common_test_steps
      - run: npm run filesize

  Apollo Client:
    docker:
      - image: circleci/node:8
    <<: *common_test_steps
      - run:
          name: Jest suite
          command: npm run --scope=apollo-client -- coverage -- --ci --testResultsProcessor=jest-junit && npm run coverage:upload
          environment:
            JEST_JUNIT_OUTPUT: "../../reports/junit/js-test-results.xml"
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit

  Apollo Boost:
    docker:
      - image: circleci/node:8
    <<: *common_test_steps
      - run:
          name: Jest suite
          command: npm run --scope=apollo-boost -- coverage -- --ci --testResultsProcessor=jest-junit && npm run coverage:upload
          environment:
            JEST_JUNIT_OUTPUT: "../../reports/junit/js-test-results.xml"
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit

  Apollo Cache:
    docker:
      - image: circleci/node:8
    <<: *common_test_steps
      - run:
          name: Jest suite
          command: npm run --scope=apollo-cache -- coverage -- --ci --testResultsProcessor=jest-junit && npm run coverage:upload
          environment:
            JEST_JUNIT_OUTPUT: "../../reports/junit/js-test-results.xml"
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit

  Apollo InMemory Cache:
    docker:
      - image: circleci/node:8
    <<: *common_test_steps
      - run:
          name: Jest suite
          command: npm run --scope=apollo-cache-inmemory -- coverage -- --ci --testResultsProcessor=jest-junit && npm run coverage:upload
          environment:
            JEST_JUNIT_OUTPUT: "../../reports/junit/js-test-results.xml"
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit

  Apollo Utilities:
    docker:
      - image: circleci/node:8
    <<: *common_test_steps
      - run:
          name: Jest suite
          command: npm run --scope=apollo-utilities -- coverage -- --ci --testResultsProcessor=jest-junit && npm run coverage:upload
          environment:
            JEST_JUNIT_OUTPUT: "../../reports/junit/js-test-results.xml"
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit

  GraphQL Anywhere:
    docker:
      - image: circleci/node:8
    <<: *common_test_steps
      - run:
          name: Jest suite
          command: npm run --scope=graphql-anywhere -- coverage -- --ci --testResultsProcessor=jest-junit && npm run coverage:upload
          environment:
            JEST_JUNIT_OUTPUT: "../../reports/junit/js-test-results.xml"
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit

workflows:
  version: 2
  Build and Test:
    jobs:
      #- Danger
      #- Docs
      #- Filesize
      - Apollo Client
      #- Apollo Boost
      #- Apollo Cache
      #- Apollo InMemory Cache
      #- Apollo Utilities
      #- GraphQL Anywhere
